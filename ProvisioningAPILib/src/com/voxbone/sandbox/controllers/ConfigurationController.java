/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/29/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.mashape.unirest.request.*;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class ConfigurationController {
    /**
     * The applyConfiguration method is used to configure one or multiple DIDs with certain settings. The possible settings that can be configured for each DID are described below in the list of input parameters.
     * @param    didIds    Required parameter: This is the list of DIDs (IDs) to be configured. Returned in checkoutCart() and listDid().
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> createApplyConfigurationAsync (
            final String didIds
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/configuration");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.post(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword())
               .body(didIds);


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listFaxUri is a method that allows you to get the list of your Fax URIs and their details.
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    faxUriId    Optional parameter: The identifier of the fax uri.
     * @param    deliveryMethod    Optional parameter: The delivery method used for this fax uri.
     * @param    faxFileFormat    Optional parameter: The file format used for this fax uri.
     * @param    uri    Optional parameter: The actual uri where the fax should be delivered. Please note that by default the system will try to find an exact match.If you would like to search for part of the uri, you can use the '%' character as a wildcard.
     * @param    csid    Optional parameter: The called station id. Please note that by default the system will try to find an exact match.If you would like to search for part of the uri, you can use the '%' character as a wildcard.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listFaxUriAsync (
            final String pageNumber,
            final String pageSize,
            final String faxUriId,
            final String deliveryMethod,
            final String faxFileFormat,
            final String uri,
            final String csid
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/faxuri");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5374226282432579916L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "faxUriId", faxUriId );
                    put( "deliveryMethod", deliveryMethod );
                    put( "faxFileFormat", faxFileFormat );
                    put( "uri", uri );
                    put( "csid", csid );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listPop is a method that allows you to get the list of Voxboneâ€™s POPs (Points Of Presence) and their corresponding IP addresses.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listPopAsync (
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/pop");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listSmsLink is a method that allows you to retrieve the list of your SMS link groups.
     * @param    smsLinkId    Optional parameter: The identifier of the sms link.
     * @param    groupId    Optional parameter: The identifier of the sms link group.
     * @param    type    Optional parameter: The protocol of the sms link.
     * @param    direction    Optional parameter: The direction of the sms link.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listSmsLinkAsync (
            final String smsLinkId,
            final String groupId,
            final String type,
            final String direction
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/smslink");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4832166701205082651L;
            {
                    put( "smsLinkId", smsLinkId );
                    put( "groupId", groupId );
                    put( "type", type );
                    put( "direction", direction );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * saveSmsLinkGroup is a method that allows you to create an SMS link group. An SMS link group is an entity that contains one or several links. For SMS traffic coming from Voxbone to one of your DIDs, you need to link the DID to the link group so that the traffic can be routed to the appropriate destination. If several links are contained in the link group, the traffic will be load balanced according to the weight parameter defined in the links definition.
     * @param    name    Optional parameter: This is the name of the link group that you wish to create. There is no specific limitations except that the name should contain less than 255 characters.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> updateSaveSmsLinkGroupAsync (
            final String name
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/smslinkgroup");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.put(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword())
               .body(name);


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listVoiceUri is a method that allows you to get the list of your Voice URIs and their details.
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    voiceUriId    Optional parameter: The identifier of the voice uri.
     * @param    backupUriId    Optional parameter: The identifier of the voice uri acting as backup.
     * @param    voiceUriProtocol    Optional parameter: The protocol to use with this voice uri.
     * @param    uri    Optional parameter: The actual uri where the call will be delivered.
     * @param    description    Optional parameter: A human-readable description of this uri.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listVoiceUriAsync (
            final String pageNumber,
            final String pageSize,
            final String voiceUriId,
            final String backupUriId,
            final String voiceUriProtocol,
            final String uri,
            final String description
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/voiceuri");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4765209830252912221L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "voiceUriId", voiceUriId );
                    put( "backupUriId", backupUriId );
                    put( "voiceUriProtocol", voiceUriProtocol );
                    put( "uri", uri );
                    put( "description", description );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * Allows you to remove one of your capacity groups.
     * @param    capacityGroupId    Required parameter: The identifier of the capacity group.
	 * @return	Returns the void response from the API call*/
    public Future<Integer> deleteCapacityGroupIdAsync (
            final String capacityGroupId
            ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/capacitygroup/{capacityGroupId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4936844717731422604L;
            {
                    put( "capacityGroupId", capacityGroupId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.delete(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<Integer> responseTask = new FutureTask<Integer>(new Callable<Integer>() {
            public Integer call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return 0;
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * deleteFaxUri is a method that allows you to remove one of your Fax URIs.
     * @param    faxUriId    Required parameter: The identifier of the fax uri.
	 * @return	Returns the void response from the API call*/
    public Future<Integer> deleteFaxUriAsync (
            final String faxUriId
            ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/faxuri/{faxUriId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4815670375274341514L;
            {
                    put( "faxUriId", faxUriId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.delete(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<Integer> responseTask = new FutureTask<Integer>(new Callable<Integer>() {
            public Integer call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return 0;
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * deleteSmsLink is a method that allows you to delete an SMS link.
     * @param    smsLinkId    Required parameter: The identifier of the sms link.
	 * @return	Returns the void response from the API call*/
    public Future<Integer> deleteSmsLinkAsync (
            final String smsLinkId
            ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/smslink/{smsLinkId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5307875892460215236L;
            {
                    put( "smsLinkId", smsLinkId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.delete(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<Integer> responseTask = new FutureTask<Integer>(new Callable<Integer>() {
            public Integer call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return 0;
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * deleteSmsLinkGroup is a method that allows you to delete an SMS link group.
     * @param    smsLinkGroupId    Required parameter: The smsLinkGroupId to be deleted
	 * @return	Returns the void response from the API call*/
    public Future<Integer> deleteSmsLinkGroupAsync (
            final String smsLinkGroupId
            ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/smslinkgroup/{smsLinkGroupId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4980624932707659203L;
            {
                    put( "smsLinkGroupId", smsLinkGroupId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.delete(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<Integer> responseTask = new FutureTask<Integer>(new Callable<Integer>() {
            public Integer call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return 0;
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * deleteVoiceUri is a method that allows you to remove one of your voice URIs.
     * @param    voiceUriId    Required parameter: The identifier of the voice uri.
	 * @return	Returns the void response from the API call*/
    public Future<Integer> deleteVoiceUriAsync (
            final String voiceUriId
            ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/voiceuri/{voiceUriId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4995217355351191714L;
            {
                    put( "voiceUriId", voiceUriId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.delete(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<Integer> responseTask = new FutureTask<Integer>(new Callable<Integer>() {
            public Integer call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return 0;
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
}