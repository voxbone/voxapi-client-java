/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/29/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.mashape.unirest.request.*;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class CDRsController {
    /**
     * The listExistingFile method allows you to list all the files that are available for download. You should use that method to get the name of the file before you can use the downloadFile method which requires the file name as an input parameter.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listExistingFilesAsync (
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/cdrs/cdrsfile");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * Downloads the requested cdrs archive file with the given name using Mtom.
     * @param    fileName    Required parameter: The name of the file to download.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> getDownloadFileAsync (
            final String fileName
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/cdrs/cdrsfile/{fileName}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5273148907644866266L;
            {
                    put( "fileName", fileName );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * Sends a request to generate a report with all the cdrs for the given month and year. Note that it is only possible to request the generation of a report for a month set in the past.
     * @param    month    Required parameter: The desired month for the report generation.
     * @param    year    Required parameter: The desired year for the report generation.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> createRequestFileCreationAsync (
            final String month,
            final String year
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/cdrs/cdrsfile/request/{year}/{month}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5295415918198863826L;
            {
                    put( "month", month );
                    put( "year", year );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.post(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
}