/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/29/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.mashape.unirest.request.*;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class OrderingController {
    /**
     * The accountBalance method is used to retrieve information about your account balance.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> getAccountBalanceAsync (
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/accountbalance");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * cancelDids is a method that allows you to cancel one or multiple DIDs.
     * @param    didIds    Required parameter: Array of identifier of the dids to cancel from order
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> createCancelDidsAsync (
            final List<Object> didIds
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/cancel");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.post(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
               .header("Content-type", "application/json; charset=utf-8")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword())
               .body(APIHelper.jsonSerialize(didIds));


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listCart is a method that allows you to list your carts and retrieve their attributes (cartIdentifier, customerReference, description), and their content (list of products - orderProducts - that are currently in the cart).
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    cartIdentifier    Optional parameter: Unique identifier for your cart. Please see the 'Create cart' or 'List cart' operations operations for more information.
     * @param    reference    Optional parameter: The reference that was given upon the cart creation.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listCartAsync (
            final String pageNumber,
            final String pageSize,
            final String cartIdentifier,
            final String reference
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/cart");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4662612098892080137L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "cartIdentifier", cartIdentifier );
                    put( "reference", reference );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listOrder is a method that allows you to get a list of your orders (after a cart has been checked out) and their status.
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    reference    Optional parameter: The order reference.
     * @param    status    Optional parameter: The status of the order.
     * @param    dateFrom    Optional parameter: When set, the system will search for orders placed after this date.
     * @param    dateTo    Optional parameter: When set, the system will search for orders placed before this date.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listOrderAsync (
            final String pageNumber,
            final String pageSize,
            final String reference,
            final String status,
            final String dateFrom,
            final String dateTo
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/order");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5236531953808410974L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "reference", reference );
                    put( "status", status );
                    put( "dateFrom", dateFrom );
                    put( "dateTo", dateTo );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * deleteCart is a method that allows you to delete a cart and all its content from your list of carts.
     * @param    cartIdentifier    Required parameter: The identifier of the cart.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> deleteCartAsync (
            final String cartIdentifier
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/cart/{cartIdentifier}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5033159246618829820L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.delete(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * checkoutCart is a method that allows you to checkout a cart and place an order for all the products contained in the cart. You can then retrieve your orders using the listOrder method.
     * @param    cartIdentifier    Required parameter: The identifier of the cart.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> getCheckoutCartAsync (
            final String cartIdentifier
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/cart/{cartIdentifier}/checkout");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4671324982840541250L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * addToCart is a method that allows you to add items (orderProducts) to a specific cart before checking out the cart. Different product types (DID, CAPACITY or CREDIT_PACKAGE) can be added into one single cart.
     * @param    cartIdentifier    Required parameter: The identifier of the cart.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> addToCartAsync (
            final String cartIdentifier
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/cart/{cartIdentifier}/product");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5738855410521799285L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.post(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * Remove a product from your cart, or change the ordered quantity.
     * @param    cartIdentifier    Required parameter: The identifier of the cart.
     * @param    orderProductId    Required parameter: The identifier of the product.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> createRemoveFromCartAsync (
            final String cartIdentifier,
            final String orderProductId
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/ordering/cart/{cartIdentifier}/product/{orderProductId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5671811032853764178L;
            {
                    put( "cartIdentifier", cartIdentifier );
                    put( "orderProductId", orderProductId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.post(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequestWithBody requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
}