/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/29/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.mashape.unirest.request.*;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class InventoryController {
    /**
     * listCapacityGroup is a method that allows you to get the list of your capacity groups.
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    capacityGroupId    Optional parameter: The identifier of the capacity group to search for.
     * @param    description    Optional parameter: The description of the capacity group.
     * @param    e164    Optional parameter: The e164 bound to the capacity group.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listCapacityGroupAsync (
            final String pageNumber,
            final String pageSize,
            final String capacityGroupId,
            final String description,
            final String e164
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/configuration/capacitygroup");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5318431095138417500L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "capacityGroupId", capacityGroupId );
                    put( "description", description );
                    put( "e164", e164 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * The listCountry operation allows you to search for countries available in the Voxbone coverage.
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    countryCodeA3    Optional parameter: The three letter identifier of the country.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listCountryAsync (
            final String pageNumber,
            final String pageSize,
            final String countryCodeA3
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/country");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5719233450713940151L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listCreditPackage is a method related to Voxbone’s inventory. This method is used to retrieve the list of packages that are available for prepaid credits top-ups (e.g. $100 Prepaid Credits package which shows a value multiplied by 100: “Price100=10000”).
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listCreditPackageAsync (
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/creditpackage");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listDid is a method related to your own inventory. This method allows you to search for DIDs within your own inventory. This method can be useful to get the current configuration of one or multiple DIDs.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    webRtcEnabled    Optional parameter: A boolean flag indicating if the numbers are WebRTC flagged.
     * @param    smsOutbound    Optional parameter: A boolean flag indicating if the numbers are SMS Outbound flagged.
     * @param    deliveryId    Optional parameter: The identifier of the pop the numbers are mapped to.
     * @param    portingReference    Optional parameter: The reference for the numbers' porting request.
     * @param    orderReference    Optional parameter: The reference for the numbers' order.
     * @param    countryCodeA3    Optional parameter: The three letter identifier of the country the numbers are part of.
     * @param    serviceType    Optional parameter: The service type of the numbers.
     * @param    smsLinkGroupId    Optional parameter: The identifier of the sms link group the numbers are mapped to.
     * @param    faxUriId    Optional parameter: The identifier of the fax uri the numbers are mapped to.
     * @param    voiceUriId    Optional parameter: The identifier of the voice uri the numbers are mapped to.
     * @param    regulationAddressId    Optional parameter: The identifier of the address the numbers are linked to.
     * @param    e164Pattern    Optional parameter: The E164, or part of it. The system will attempt to find any number which E164 contains this string of numbers.
     * @param    didGroupIds    Optional parameter: A list of identifiers for the didGroup the numbers are part of.
     * @param    needAddressLink    Optional parameter: A boolean flag indicating if the numbers need to be linked to an address for regulation purposes.
     * @param    didIds    Optional parameter: A list of number identifiers.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listDidAsync (
            final String pageSize,
            final String pageNumber,
            final String webRtcEnabled,
            final String smsOutbound,
            final String deliveryId,
            final String portingReference,
            final String orderReference,
            final String countryCodeA3,
            final String serviceType,
            final String smsLinkGroupId,
            final String faxUriId,
            final String voiceUriId,
            final String regulationAddressId,
            final String e164Pattern,
            final String didGroupIds,
            final String needAddressLink,
            final String didIds
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/did");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5060406792816268484L;
            {
                    put( "pageSize", pageSize );
                    put( "pageNumber", pageNumber );
                    put( "webRtcEnabled", webRtcEnabled );
                    put( "smsOutbound", smsOutbound );
                    put( "deliveryId", deliveryId );
                    put( "portingReference", portingReference );
                    put( "orderReference", orderReference );
                    put( "countryCodeA3", countryCodeA3 );
                    put( "serviceType", serviceType );
                    put( "smsLinkGroupId", smsLinkGroupId );
                    put( "faxUriId", faxUriId );
                    put( "voiceUriId", voiceUriId );
                    put( "regulationAddressId", regulationAddressId );
                    put( "e164Pattern", e164Pattern );
                    put( "didGroupIds", didGroupIds );
                    put( "needAddressLink", needAddressLink );
                    put( "didIds", didIds );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listDidGroup is a method related to Voxbone’s inventory. It allows you to retrieve the list of DID groups. A DID group can be defined as the smallest set of DIDs which is usually DIDs that share the same city or area code attributes. It is a method which is useful to get pricing info on a DID and to get didGroupIds which is a required parameter when placing a DID order.
     * @param    countryCodeA3    Required parameter: The three letter identifier for the didGroup's country.
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    didGroupIds    Optional parameter: The list of didGroup identifier.
     * @param    stateId    Optional parameter: The numerical identifier for the didGroup's state. Please see the listState operation to retrieve a validstate identifier.
     * @param    cityNamePattern    Optional parameter: The name of the didGroup's city. Note that the system will execute a partial match on the city name.
     * @param    rateCenter    Optional parameter: The name of the didGroup's ratecenter. Note that the system will execute a partial match on the ratecenter name.
     * @param    areaCode    Optional parameter: The didGroup's area code.
     * @param    didType    Optional parameter: The didGroup's did type.
     * @param    showEmpty    Optional parameter: Set to true if you want to show the didGroups with no stock currently available.
     * @param    featureIds    Optional parameter: The list of desired feature. This list should contain the identifier of any desired feature for the didGroup.Please refer to the listFeature operation to retrieve valid feature identifiers.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listDidGroupAsync (
            final String countryCodeA3,
            final String pageNumber,
            final String pageSize,
            final String didGroupIds,
            final String stateId,
            final String cityNamePattern,
            final String rateCenter,
            final String areaCode,
            final String didType,
            final String showEmpty,
            final String featureIds
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/didgroup");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5452497911811973378L;
            {
                    put( "countryCodeA3", countryCodeA3 );
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "didGroupIds", didGroupIds );
                    put( "stateId", stateId );
                    put( "cityNamePattern", cityNamePattern );
                    put( "rateCenter", rateCenter );
                    put( "areaCode", areaCode );
                    put( "didType", didType );
                    put( "showEmpty", showEmpty );
                    put( "featureIds", featureIds );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listFeature is a method related to Voxbone’s inventory. It allows you to retrieve the list of features (featureID, name and description) that DIDs can have such as VoxFAX or VoxSMS.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listFeatureAsync (
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/feature");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listTrunk is a method related to your own inventory. This method allows you to get the list of the trunks that are available in your account.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listTrunkAsync (
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/trunk");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * The listZone operation allows you to display all the zones currently configured in your account.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listZoneAsync (
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/zone");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * The listCountry operation allows you to search for countries available in the Voxbone coverage.
     * @param    countryCodeA3    Required parameter: The three letter identifier of the country.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listACountryAsync (
            final String countryCodeA3
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/country/{countryCodeA3}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5583504472638318416L;
            {
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listRestriction is a method related to Voxbone’s inventory. It allows you to get the list of restrictions per country in a text format.
     * @param    countryCodeA3    Required parameter: The three letter identifier of the country.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listRestrictionAsync (
            final String countryCodeA3
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/country/{countryCodeA3}/restriction");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5605917364749636158L;
            {
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
    /**
     * listState is a method related to Voxbone’s inventory. It allows you to get the list of states for a country that has states such as USA and CAN.
     * @param    countryCodeA3    Required parameter: The three letter identifier of the country.
	 * @return	Returns the JsonNode response from the API call*/
    public Future<JsonNode> listStateAsync (
            final String countryCodeA3
            ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/services/rest/inventory/country/{countryCodeA3}/state");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5485348940185713322L;
            {
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json")
                .basicAuth(Configuration.getBasicAuthUserName(), Configuration.getBasicAuthPassword());


        //finalize request for async response
        final HttpRequest requestAsync = request;

        FutureTask<JsonNode> responseTask = new FutureTask<JsonNode>(new Callable<JsonNode>() {
            public JsonNode call() throws IOException, APIException, ExecutionException, InterruptedException {
                //invoke request and get response
                Future<HttpResponse<String>> responseAsync = requestAsync.asStringAsync();

                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody());
        }});

        //execute async using thread pool
        APIHelper.scheduler.execute(responseTask);
        return responseTask;
    }
        
}