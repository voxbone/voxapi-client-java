/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/29/2015
 */
package com.voxbone.sandbox.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class Peer 
        extends java.util.Observable {

    private Boolean t38Enabled;
    private String dtmf;
    private Boolean dtmfInbandMute;
    private String codecs;
    /** GETTER
     * Indicates whether a DID is T.38 enabled. It can be configured per DID in the configuration module using the applyConfiguration method
     */
    @JsonGetter("t38Enabled")
    public Boolean getT38Enabled ( ) { 
        return this.t38Enabled;
    }
    
    /** SETTER
     * Indicates whether a DID is T.38 enabled. It can be configured per DID in the configuration module using the applyConfiguration method
     */
    @JsonSetter("t38Enabled")
    public void setT38Enabled (Boolean value) { 
        this.t38Enabled = value;
        notifyObservers(this.t38Enabled);
    }
 
    /** GETTER
     * dtmf and dtmfInbandMute indicate the current DMTF configuration for the calls on a given DID. The possible values for dtmf are INBAND, INFO, RFC2833, RFC2833_INFO, RFC2833_INBAND. For the last two values, the system will automatically choose between RFC2833 and INFO or INBAND. The standard way to carry out-of-band DTMF via SIP is as RTP payload (see RFC 2833). It has the advantage that it provides accurate timing and alignment with the speech RTP packets.
     */
    @JsonGetter("dtmf")
    public String getDtmf ( ) { 
        return this.dtmf;
    }
    
    /** SETTER
     * dtmf and dtmfInbandMute indicate the current DMTF configuration for the calls on a given DID. The possible values for dtmf are INBAND, INFO, RFC2833, RFC2833_INFO, RFC2833_INBAND. For the last two values, the system will automatically choose between RFC2833 and INFO or INBAND. The standard way to carry out-of-band DTMF via SIP is as RTP payload (see RFC 2833). It has the advantage that it provides accurate timing and alignment with the speech RTP packets.
     */
    @JsonSetter("dtmf")
    public void setDtmf (String value) { 
        this.dtmf = value;
        notifyObservers(this.dtmf);
    }
 
    /** GETTER
     * By activating dtmfInbandMute on a number, the inband DTMF tones are removed from the audio stream. This is recommended when you add inband DTMF tones yourself to the audio stream afterwards (which can be the case for example when the call is sent back to the PSTN).
     */
    @JsonGetter("dtmfInbandMute")
    public Boolean getDtmfInbandMute ( ) { 
        return this.dtmfInbandMute;
    }
    
    /** SETTER
     * By activating dtmfInbandMute on a number, the inband DTMF tones are removed from the audio stream. This is recommended when you add inband DTMF tones yourself to the audio stream afterwards (which can be the case for example when the call is sent back to the PSTN).
     */
    @JsonSetter("dtmfInbandMute")
    public void setDtmfInbandMute (Boolean value) { 
        this.dtmfInbandMute = value;
        notifyObservers(this.dtmfInbandMute);
    }
 
    /** GETTER
     * List of codecs that are supported for the calls on a given DID. The possible values are: G711A, G711U, G729, G723.
     */
    @JsonGetter("codecs")
    public String getCodecs ( ) { 
        return this.codecs;
    }
    
    /** SETTER
     * List of codecs that are supported for the calls on a given DID. The possible values are: G711A, G711U, G729, G723.
     */
    @JsonSetter("codecs")
    public void setCodecs (String value) { 
        this.codecs = value;
        notifyObservers(this.codecs);
    }
 
}
 