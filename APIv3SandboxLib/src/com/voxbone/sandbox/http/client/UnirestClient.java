/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/10/2015
 */
package com.voxbone.sandbox.http.client;

import com.mashape.unirest.http.exceptions.UnirestException;
import com.voxbone.sandbox.APIError;
import com.voxbone.sandbox.http.request.HttpBodyRequest;
import com.voxbone.sandbox.http.request.HttpMethod;
import com.voxbone.sandbox.http.request.HttpRequest;
import com.voxbone.sandbox.http.response.HttpResponse;
import com.voxbone.sandbox.http.response.HttpStringResponse;
import java.io.InputStream;
import java.util.Map;

public class UnirestClient implements HttpClient {
    /**
     * Private variables to implement singleton pattern
     */
    private static Object synRoot = new Object();
    private static HttpClient sharedInstance = null;

    /**
     * Singleton access to the shared instance
     * @return A shared instance of UnirestClient
     */
    public static HttpClient getSharedInstance()
    {
        synchronized (synRoot) {
            if(sharedInstance == null)
                sharedInstance = new UnirestClient();
            return sharedInstance;
        }
    }

    /**
     * Execute a given HttpRequest to get string response back
     * @param   request     The given HttpRequest to execute
     * @param   context     A user specified context object
     */
    public void executeAsStringAsync(HttpRequest request, APICallBack<HttpResponse> callBack) {
        com.mashape.unirest.request.HttpRequest uniRequest = UnirestClient.convertRequest(request);
        try {
            com.mashape.unirest.http.HttpResponse<String> response = uniRequest.asString();
            UnirestClient.publishResponse(response, request, callBack, null);
        }
        catch  (UnirestException ex) {
            UnirestClient.publishResponse(null, request, callBack, ex);
        }
    }

    /**
     * Execute a given HttpRequest to get string response back
     * @param   request     The given HttpRequest to execute
     * @param   context     A user specified context object
     */
    public HttpResponse executeAsString(HttpRequest request) throws APIError {
        com.mashape.unirest.request.HttpRequest uniRequest = UnirestClient.convertRequest(request);
        try {
            com.mashape.unirest.http.HttpResponse<String> response = uniRequest.asString();
            return  convertResponse(response);
        }
        catch  (UnirestException ex) {
            throw new APIError(ex.getMessage());
        }
    }

    /**
     * Execute a given HttpRequest to get binary response back
     * @param   request     The given HttpRequest to execute
     * @param   context     A user specified context object
     */
    public void executeAsBinaryAsync(HttpRequest request, APICallBack<HttpResponse> callBack) {
        com.mashape.unirest.request.HttpRequest uniRequest = UnirestClient.convertRequest(request);
        try {
            com.mashape.unirest.http.HttpResponse<InputStream> response = uniRequest.asBinary();
            UnirestClient.publishResponse(response, request, callBack, null);
        }
        catch  (UnirestException ex) {
            UnirestClient.publishResponse(null, request, callBack, ex);
        }
    }

    /**
     * Execute a given HttpRequest to get binary response back
     * @param   request     The given HttpRequest to execute
     * @param   context     A user specified context object
     */
    public HttpResponse executeAsBinary(HttpRequest request) {
        com.mashape.unirest.request.HttpRequest uniRequest = UnirestClient.convertRequest(request);
        try {
            com.mashape.unirest.http.HttpResponse<InputStream> response = uniRequest.asBinary();
            return convertResponse(response);
        }
        catch  (UnirestException ex) {
            throw new APIError(ex.getMessage());
        }
    }

    /**
     * Publishes success or failure result as HttpResponse from a HttpRequest
     * @param   response    The http response to publish
     * @param   context     The user specified context object
     * @param   completionBlock     The success and failure code block reference to invoke the delegate
     * @param   uniException       The reported errors for getting the http response
     */
    protected static void publishResponse (com.mashape.unirest.http.HttpResponse<?> response,
                                 Object context, APICallBack<HttpResponse> completionBlock, UnirestException uniException)
    {
        //if there are no errors, try to convert to our internal format
        if(uniException == null)
        {
            HttpResponse httpResponse = UnirestClient.convertResponse(response);
            completionBlock.onSuccess(context, httpResponse);
        }
        else
        {
            Throwable innerException = uniException.getCause();
            completionBlock.onFailure(context, new APIError(innerException.getMessage()));
        }
    }

    /**
     * Converts a given Unirest http response into our internal http response model
     * @param   response    The given unirest http response
     * @return              The converted http response
     */
    public static HttpResponse convertResponse(com.mashape.unirest.http.HttpResponse<?> response)
    {
        HttpResponse httpResponse = null;

        if(response.getBody() instanceof String)
        {
            httpResponse = new HttpStringResponse(response.getStatus(),
                    response.getHeaders().getFlatHeaders(), response.getRawBody(), (String)response.getBody());
        }
        else
        {
            httpResponse = new HttpResponse(response.getStatus(), response.getHeaders().getFlatHeaders(), response.getRawBody());
        }

        return httpResponse;
    }


    /**
     * Converts a given internal http request into unirest http request model
     * @param   request     The given http request in internal format
     * @return              The converted unirest http request
     */
    protected static com.mashape.unirest.request.HttpRequest convertRequest(HttpRequest request)
    {
        com.mashape.unirest.http.HttpMethod uniMethod = UnirestClient.convertHttpMetod(request.getHttpMethod());
        String url = request.getQueryUrl();

        //instantiate unirest request object
        com.mashape.unirest.request.HttpRequestWithBody uniRequest
                = new com.mashape.unirest.request.HttpRequestWithBody(uniMethod, url);

        //set request payload
        if(request instanceof HttpBodyRequest)
        {
            //set request body
            ((com.mashape.unirest.request.HttpRequestWithBody)uniRequest).body(((HttpBodyRequest) request).getBody());
        }
        else
        {
            //set request fields
            uniRequest.fields(request.getParameters());
        }

        //set request headers
        uniRequest.headers(request.getHeaders());

        //set basic auth credentials if needed
        if((null != request.getUsername()) && (!request.getUsername().isEmpty()))
        {
            uniRequest.basicAuth(request.getUsername(), request.getPassword());
        }

        return uniRequest;
    }

    /**
     * Converts a given internal http method enumeration into unirest http method unirest
     * @param   method      The given http method enum in internal format
     * @return              The converted unirest http method enum
     */
    protected static com.mashape.unirest.http.HttpMethod convertHttpMetod(HttpMethod  method)
    {
        switch (method) {
            case HTTP_POST:
                return com.mashape.unirest.http.HttpMethod.POST;

            case HTTP_PATCH:
                return com.mashape.unirest.http.HttpMethod.PATCH;

            case HTTP_PUT:
                return com.mashape.unirest.http.HttpMethod.PUT;

            case HTTP_DELETE:
                return com.mashape.unirest.http.HttpMethod.DELETE;

            default:
                return com.mashape.unirest.http.HttpMethod.GET;
        }
    }

    /**
     * Create a simple HTTP GET request with basic authentication
     */
    public HttpRequest get(String _queryUrl,
                           Map<String, String> _headers, Map<String, Object> _parameters,
                           String _username, String _password) {
        return new HttpRequest(HttpMethod.HTTP_GET, _queryUrl, _headers, _parameters, _username, _password);
    }

    /**
     * Create a simple HTTP GET request
     */
    public HttpRequest get(String _queryUrl,
                           Map<String, String> _headers, Map<String, Object> _parameters) {
        return new HttpRequest(HttpMethod.HTTP_GET, _queryUrl, _headers, _parameters);
    }

    /**
     * Create an HTTP POST request with parameters
     */
    public HttpRequest post(String _queryUrl,
                            Map<String, String> _headers, Map<String, Object> _parameters) {
        return new HttpRequest(HttpMethod.HTTP_POST, _queryUrl, _headers, _parameters);
    }

    /**
     * Create an HTTP POST request with parameters and with basic authentication
     */
    public HttpRequest post(String _queryUrl,
                            Map<String, String> _headers, Map<String, Object> _parameters,
                            String _username, String _password) {
        return new HttpRequest(HttpMethod.HTTP_POST, _queryUrl, _headers, _parameters, _username, _password);
    }

    /**
     * Create an HTTP POST request with body
     */
    public HttpBodyRequest postBody(String _queryUrl,
                                    Map<String, String> _headers, String _body) {
        return new HttpBodyRequest(HttpMethod.HTTP_POST, _queryUrl, _headers, _body);
    }

    /**
     * Create an HTTP POST request with body and with basic authentication
     */
    public HttpBodyRequest postBody(String _queryUrl,
                                    Map<String, String> _headers, String _body,
                                    String _username, String _password) {
        return new HttpBodyRequest(HttpMethod.HTTP_POST, _queryUrl, _headers, _body, _username, _password);
    }

    /**
     * Create an HTTP PUT request with parameters
     */
    public HttpRequest put(String _queryUrl,
                           Map<String, String> _headers, Map<String, Object> _parameters) {
        return new HttpRequest(HttpMethod.HTTP_PUT, _queryUrl, _headers, _parameters);
    }

    /**
     * Create an HTTP PUT request with parameters and with basic authentication
     */
    public HttpRequest put(String _queryUrl,
                           Map<String, String> _headers, Map<String, Object> _parameters,
                           String _username, String _password) {
        return new HttpRequest(HttpMethod.HTTP_PUT, _queryUrl, _headers, _parameters, _username, _password);
    }

    /**
     * Create an HTTP PUT request with body
     */
    public HttpBodyRequest putBody(String _queryUrl,
                                   Map<String, String> _headers, String _body) {
        return new HttpBodyRequest(HttpMethod.HTTP_PUT, _queryUrl, _headers, _body);
    }

    /**
     * Create an HTTP PUT request with body and with basic authentication
     */
    public HttpBodyRequest putBody(String _queryUrl,
                                   Map<String, String> _headers, String _body,
                                   String _username, String _password) {
        return new HttpBodyRequest(HttpMethod.HTTP_PUT, _queryUrl, _headers, _body, _username, _password);
    }

    /**
     * Create an HTTP PATCH request with parameters
     */
    public HttpRequest patch(String _queryUrl,
                             Map<String, String> _headers, Map<String, Object> _parameters) {
        return new HttpRequest(HttpMethod.HTTP_PATCH, _queryUrl, _headers, _parameters);
    }

    /**
     * Create an HTTP PATCH request with parameters and with basic authentication
     */
    public HttpRequest patch(String _queryUrl,
                             Map<String, String> _headers, Map<String, Object> _parameters,
                             String _username, String _password) {
        return new HttpRequest(HttpMethod.HTTP_PATCH, _queryUrl, _headers, _parameters, _username, _password);
    }

    /**
     * Create an HTTP PATCH request with body
     */
    public HttpBodyRequest patchBody(String _queryUrl,
                                     Map<String, String> _headers, String _body) {
        return new HttpBodyRequest(HttpMethod.HTTP_PATCH, _queryUrl, _headers, _body);
    }

    /**
     * Create an HTTP PATCH request with body and with basic authentication
     */
    public HttpBodyRequest patchBody(String _queryUrl,
                                     Map<String, String> _headers, String _body,
                                     String _username, String _password) {
        return new HttpBodyRequest(HttpMethod.HTTP_PATCH, _queryUrl, _headers, _body, _username, _password);
    }

    /**
     * Create an HTTP DELETE request with parameters
     */
    public HttpRequest delete(String _queryUrl,
                              Map<String, String> _headers, Map<String, Object> _parameters) {
        return new HttpRequest(HttpMethod.HTTP_DELETE, _queryUrl, _headers, _parameters);
    }

    /**
     * Create an HTTP DELETE request with parameters and with basic authentication
     */
    public HttpRequest delete(String _queryUrl,
                              Map<String, String> _headers, Map<String, Object> _parameters,
                              String _username, String _password) {
        return new HttpRequest(HttpMethod.HTTP_DELETE, _queryUrl, _headers, _parameters, _username, _password);
    }

    /**
     * Create an HTTP DELETE request with body
     */
    public HttpBodyRequest deleteBody(String _queryUrl,
                                      Map<String, String> _headers, String _body) {
        return new HttpBodyRequest(HttpMethod.HTTP_DELETE, _queryUrl, _headers, _body);
    }

    /**
     * Create an HTTP DELETE request with body and with basic authentication
     */
    public HttpBodyRequest deleteBody(String _queryUrl,
                                      Map<String, String> _headers, String _body,
                                      String _username, String _password) {
        return new HttpBodyRequest(HttpMethod.HTTP_DELETE, _queryUrl, _headers, _body, _username, _password);
    }
}
