/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/10/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.voxbone.sandbox.http.client.HttpClient;
import com.voxbone.sandbox.http.request.HttpRequest;
import com.voxbone.sandbox.http.response.HttpResponse;
import com.voxbone.sandbox.http.response.HttpStringResponse;
import com.voxbone.sandbox.http.client.APICallBack;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class OrderingController extends BaseController {

    //private fields for configuration

   /** The username to use with basic authentication */
    private String basicAuthUserName;

   /** The password to use with basic authentication */
    private String basicAuthPassword;

   /**
    * Constructor with authentication and configuration parameters */
    public OrderingController (String basicAuthUserName, String basicAuthPassword) {
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

   /**
    * Constructor with authentication and configuration parameters */
    public OrderingController (HttpClient _client, String basicAuthUserName, String basicAuthPassword) {
        super(_client);
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

    /**
     * Displays the current balance of your account and auto-refill options
	 * @return	Returns the AccountBalanceModel response from the API call*/
    public void getAccountBalanceAsync(
            final APICallBack<AccountBalanceModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/accountbalance");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            AccountBalanceModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<AccountBalanceModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Create a new cart
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the CartModel response from the API call*/
    public void updateCartAsync(
            final CartCreateModel body,
            final APICallBack<CartModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.putBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CartModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CartModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Add a product to an existing cart
     * @param    cartIdentifier    Required parameter: The identifier of the cart
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the StatusModel response from the API call*/
    public void createCartProductAsync(
            final int cartIdentifier,
            final CartItemModel body,
            final APICallBack<StatusModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart/{cartIdentifier}/product");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5138603236774034405L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.postBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available carts
     * @param    pageNumber    Required parameter: The page number, starting at 0
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response)
     * @param    reference    Optional parameter: The custom reference associated to the cart
	 * @return	Returns the CartListModel response from the API call*/
    public void getCartsAsync(
            final int pageNumber,
            final int pageSize,
            final String reference,
            final APICallBack<CartListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5203455595836723980L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "reference", reference );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CartListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CartListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Remove part or all of a product in a given cart
     * @param    cartIdentifier    Required parameter: The identifier of the cart
     * @param    orderProductId    Required parameter: The identifier of the product to update
     * @param    quantity    Required parameter: The quantity of product to remove from the cart
	 * @return	Returns the StatusModel response from the API call*/
    public void createCartProductRemoveAsync(
            final int cartIdentifier,
            final int orderProductId,
            final QuantityModel quantity,
            final APICallBack<StatusModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart/{cartIdentifier}/product/{orderProductId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4665153622952453773L;
            {
                    put( "cartIdentifier", cartIdentifier );
                    put( "orderProductId", orderProductId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.postBody(queryUrl, headers, APIHelper.jsonSerialize(quantity),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Delete a cart and its content
     * @param    cartIdentifier    Required parameter: The identifier of the cart to delete
	 * @return	Returns the StatusModel response from the API call*/
    public void deleteCartAsync(
            final int cartIdentifier,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart/{cartIdentifier}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5234711630217971976L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.delete(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Check out a cart
     * @param    cartIdentifier    Required parameter: The identifier of the cart to checkout
	 * @return	Returns the CartCheckoutModel response from the API call*/
    public void getCartCheckoutAsync(
            final int cartIdentifier,
            final APICallBack<CartCheckoutModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart/{cartIdentifier}/checkout");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4813180495907508985L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CartCheckoutModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CartCheckoutModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List or search your orders
     * @param    pageNumber    Required parameter: The page number, starting at 0
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response)
     * @param    reference    Optional parameter: The reference assigned to the order by voxbone
     * @param    customerReference    Optional parameter: The custom reference assigned to the cart that created the order
     * @param    status    Optional parameter: The current order status
     * @param    dateFrom    Optional parameter: The earliest date at which the order was created ('yyyy-MM-dd HH:mm:ss' format)
     * @param    dateTo    Optional parameter: The latest date at which the order was created ('yyyy-MM-dd HH:mm:ss' format)
	 * @return	Returns the OrderListModel response from the API call*/
    public void getOrdersAsync(
            final int pageNumber,
            final int pageSize,
            final String reference,
            final String customerReference,
            final String status,
            final String dateFrom,
            final String dateTo,
            final APICallBack<OrderListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/order");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5186828562322266719L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "reference", reference );
                    put( "customerReference", customerReference );
                    put( "status", status );
                    put( "dateFrom", dateFrom );
                    put( "dateTo", dateTo );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            OrderListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<OrderListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Cancel DIDs and remove them from your account
     * @param    didIds    Required parameter: The list of identifier for the DIDs to cancel
	 * @return	Returns the StatusModel response from the API call*/
    public void createCancelAsync(
            final DidIdListModel didIds,
            final APICallBack<StatusModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cancel");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.postBody(queryUrl, headers, APIHelper.jsonSerialize(didIds),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Show information on a specific cart
     * @param    cartIdentifier    Required parameter: The identifier of the cart
	 * @return	Returns the CartModel response from the API call*/
    public void getCartDetailsAsync(
            final int cartIdentifier,
            final APICallBack<CartModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart/{cartIdentifier}/");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5480154717124207885L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CartModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CartModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Displays detailed information on a specific cart
     * @param    cartIdentifier    Required parameter: The identifier of the cart
	 * @return	Returns the CartListModel response from the API call*/
    public void getCartAsync(
            final int cartIdentifier,
            final APICallBack<CartListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/ordering/cart/{cartIdentifier}	");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5246463546664639654L;
            {
                    put( "cartIdentifier", cartIdentifier );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CartListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CartListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
}