/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/10/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.voxbone.sandbox.http.client.HttpClient;
import com.voxbone.sandbox.http.request.HttpRequest;
import com.voxbone.sandbox.http.response.HttpResponse;
import com.voxbone.sandbox.http.response.HttpStringResponse;
import com.voxbone.sandbox.http.client.APICallBack;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class ConfigurationController extends BaseController {

    //private fields for configuration

   /** The username to use with basic authentication */
    private String basicAuthUserName;

   /** The password to use with basic authentication */
    private String basicAuthPassword;

   /**
    * Constructor with authentication and configuration parameters */
    public ConfigurationController (String basicAuthUserName, String basicAuthPassword) {
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

   /**
    * Constructor with authentication and configuration parameters */
    public ConfigurationController (HttpClient _client, String basicAuthUserName, String basicAuthPassword) {
        super(_client);
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

    /**
     * Apply a given configuration to one or more numbers
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the ConfigurationStatusListModel response from the API call*/
    public void createConfigurationAsync(
            final DidConfigurationModel body,
            final APICallBack<ConfigurationStatusListModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/configuration");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.postBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            ConfigurationStatusListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<ConfigurationStatusListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available capacity groups
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    description    Optional parameter: A human readable description of the capacity group
     * @param    e164    Optional parameter: The E164 of a number mapped to the capacity group
	 * @return	Returns the CapacityGroupListModel response from the API call*/
    public void getCapacityGroupsAsync(
            final int pageNumber,
            final int pageSize,
            final String description,
            final String e164,
            final APICallBack<CapacityGroupListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/capacitygroup");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5700626655970881187L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "description", description );
                    put( "e164", e164 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CapacityGroupListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CapacityGroupListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Save or update a capacity group
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the CapacityGroupModel response from the API call*/
    public void updateCapacityGroupAsync(
            final ACapacityGroupSaveModel body,
            final APICallBack<CapacityGroupModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/capacitygroup");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.putBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CapacityGroupModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CapacityGroupModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Delete a capacity group
     * @param    capacityGroupId    Required parameter: The identifier of the capacity group to delete
	 * @return	Returns the StatusModel response from the API call*/
    public void deleteCapacityGroupAsync(
            final int capacityGroupId,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/capacitygroup/{capacityGroupId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5041870119868897123L;
            {
                    put( "capacityGroupId", capacityGroupId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.delete(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available fax URIs
     * @param    pageNumber    Required parameter: The page number, starting at 0
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response)
     * @param    deliveryMethod    Optional parameter: The delivery method used by the fax URI
     * @param    faxFileFormat    Optional parameter: The file format used by the fax URI
     * @param    uri    Optional parameter: The formatted URI
     * @param    csid    Optional parameter: The csid used by the fax URI
	 * @return	Returns the FaxUriListModel response from the API call*/
    public void getFaxUrisAsync(
            final int pageNumber,
            final int pageSize,
            final String deliveryMethod,
            final String faxFileFormat,
            final String uri,
            final String csid,
            final APICallBack<FaxUriListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/faxuri");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4757422497122286615L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "deliveryMethod", deliveryMethod );
                    put( "faxFileFormat", faxFileFormat );
                    put( "uri", uri );
                    put( "csid", csid );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            FaxUriListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<FaxUriListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Save or update a fax URI
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the FaxUriModel response from the API call*/
    public void updateFaxUriAsync(
            final FaxUriSaveModel body,
            final APICallBack<FaxUriModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/faxuri");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.putBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            FaxUriModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<FaxUriModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Delete a fax uri
     * @param    faxUriId    Required parameter: The identifier of the fax uri to delete
	 * @return	Returns the StatusModel response from the API call*/
    public void deleteFaxUriAsync(
            final int faxUriId,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/faxuri/{faxUriId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5717778874518437136L;
            {
                    put( "faxUriId", faxUriId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.delete(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available voice URIs
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    backupUriId    Optional parameter: The identifier of the backup voice URI
     * @param    voiceUriProtocol    Optional parameter: The protocol of the voice URI
     * @param    uri    Optional parameter: The URI where the call is delivered
     * @param    description    Optional parameter: A human readable description of the URI
	 * @return	Returns the VoiceUriListModel response from the API call*/
    public void getVoiceUrisAsync(
            final int pageNumber,
            final int pageSize,
            final Integer backupUriId,
            final String voiceUriProtocol,
            final String uri,
            final String description,
            final APICallBack<VoiceUriListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/voiceuri");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4666180688368972389L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "backupUriId", backupUriId );
                    put( "voiceUriProtocol", voiceUriProtocol );
                    put( "uri", uri );
                    put( "description", description );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            VoiceUriListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<VoiceUriListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Save or update a voice URI
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the VoiceUriModel response from the API call*/
    public void updateVoiceUriAsync(
            final AVoiceUriSaveModel body,
            final APICallBack<VoiceUriModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/voiceuri");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.putBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            VoiceUriModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<VoiceUriModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Delete a voice uri
     * @param    voiceUriId    Required parameter: The identifier of the voice uri to delete
	 * @return	Returns the StatusModel response from the API call*/
    public void deleteVoiceUriAsync(
            final int voiceUriId,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/voiceuri/{voiceUriId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4727099833691254366L;
            {
                    put( "voiceUriId", voiceUriId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.delete(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available POPs, or deliveries, for call routing
	 * @return	Returns the PopListModel response from the API call*/
    public void getPopAsync(
            final APICallBack<PopListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/pop");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            PopListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<PopListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available sms link groups
	 * @return	Returns the SmsLinkGroupListModel response from the API call*/
    public void getSmsLinkGroupsAsync(
            final APICallBack<SmsLinkGroupListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslinkgroup");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            SmsLinkGroupListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<SmsLinkGroupListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Create a new sms link group
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the IdModel response from the API call*/
    public void updateSmsLinkGroupAsync(
            final SmsLinkGroupSaveModel body,
            final APICallBack<IdModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslinkgroup");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.putBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            IdModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<IdModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Delete an sms link group
     * @param    smsLinkGroupId    Required parameter: The identifier of the sms link group to delete
     * @param    contentType    Required parameter: Example: application/json; charset=utf-8
	 * @return	Returns the StatusModel response from the API call*/
    public void deleteSmsLinkGroupAsync(
            final int smsLinkGroupId,
            final String contentType,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslinkgroup/{smsLinkGroupId}	");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5072536700493628644L;
            {
                    put( "smsLinkGroupId", smsLinkGroupId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", contentType );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.delete(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Save or update an sms link
     * @param    body    Required parameter: TODO: type description here
	 * @return	Returns the SmsLinkModel response from the API call*/
    public void updateSmsLinkAsync(
            final SmsLinkSaveModel body,
            final APICallBack<SmsLinkModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslink");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.putBody(queryUrl, headers, APIHelper.jsonSerialize(body),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            SmsLinkModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<SmsLinkModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Delete an sms link
     * @param    smsLinkId    Required parameter: The identifier of the sms link to delete
	 * @return	Returns the StatusModel response from the API call*/
    public void deleteSmsLinkAsync(
            final int smsLinkId,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslink/{smsLinkId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5380965331015211251L;
            {
                    put( "smsLinkId", smsLinkId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.delete(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Displays detailed information on a specific voice URI
     * @param    voiceUriId    Required parameter: The identifier of the voice URI
	 * @return	Returns the VoiceUriModel response from the API call*/
    public void getVoiceUriAsync(
            final int voiceUriId,
            final APICallBack<VoiceUriModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/voiceuri/{voiceUriId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5705325840659454020L;
            {
                    put( "voiceUriId", voiceUriId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            VoiceUriModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<VoiceUriModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Displays detailed information on a specific capacity group
     * @param    capacityGroupId    Required parameter: The identifier of the capacity group
	 * @return	Returns the CapacityGroupListModel response from the API call*/
    public void getCapacityGroupAsync(
            final int capacityGroupId,
            final APICallBack<CapacityGroupListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/capacitygroup/{capacityGroupId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4850362503859377914L;
            {
                    put( "capacityGroupId", capacityGroupId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CapacityGroupListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CapacityGroupListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Displays detailed information on a specific fax URI
     * @param    faxUriId    Required parameter: The identifier of the fax URI
	 * @return	Returns the FaxUriListModel response from the API call*/
    public void getFaxUriAsync(
            final int faxUriId,
            final APICallBack<FaxUriListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/faxuri/{faxUriId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4784278593501220753L;
            {
                    put( "faxUriId", faxUriId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            FaxUriListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<FaxUriListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Displays detailed information on a specific sms link
     * @param    smsLinkId    Required parameter: The identifier of the sms link
	 * @return	Returns the SmsLinkListModel response from the API call*/
    public void getSmsLinkAsync(
            final int smsLinkId,
            final APICallBack<SmsLinkListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslink/{smsLinkId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4984336926925500148L;
            {
                    put( "smsLinkId", smsLinkId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            SmsLinkListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<SmsLinkListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available sms links
     * @param    groupId    Optional parameter: The identifier of the sms link's group
     * @param    type    Optional parameter: The protocol of the sms link
     * @param    direction    Optional parameter: the direction of the sms link
     * @param    smsLinkId    Optional parameter: The identifier of the sms link
	 * @return	Returns the SmsLinkListModel response from the API call*/
    public void getSmsLinksAsync(
            final Integer groupId,
            final String type,
            final String direction,
            final String smsLinkId,
            final APICallBack<SmsLinkListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslink");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5731289926992515557L;
            {
                    put( "groupId", groupId );
                    put( "type", type );
                    put( "direction", direction );
                    put( "smsLinkId", smsLinkId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            SmsLinkListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<SmsLinkListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * create an sms link
     * @param    smsLinkId    Required parameter: The identifier of the sms link
	 * @return	Returns the SmsLinkModel response from the API call*/
    public void newSmsLinkAsync(
            final int smsLinkId,
            final APICallBack<SmsLinkModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/configuration/smslink/{smsLinkId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4827421157704714034L;
            {
                    put( "smsLinkId", smsLinkId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.put(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            SmsLinkModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<SmsLinkModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
}