/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/10/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.voxbone.sandbox.http.client.HttpClient;
import com.voxbone.sandbox.http.request.HttpRequest;
import com.voxbone.sandbox.http.response.HttpResponse;
import com.voxbone.sandbox.http.response.HttpStringResponse;
import com.voxbone.sandbox.http.client.APICallBack;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class CdrsController extends BaseController {

    //private fields for configuration

   /** The username to use with basic authentication */
    private String basicAuthUserName;

   /** The password to use with basic authentication */
    private String basicAuthPassword;

   /**
    * Constructor with authentication and configuration parameters */
    public CdrsController (String basicAuthUserName, String basicAuthPassword) {
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

   /**
    * Constructor with authentication and configuration parameters */
    public CdrsController (HttpClient _client, String basicAuthUserName, String basicAuthPassword) {
        super(_client);
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

    /**
     * List available monthly call reports
	 * @return	Returns the FileListModel response from the API call*/
    public void getCdrsFilesAsync(
            final APICallBack<FileListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/cdrs/cdrsfile");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            FileListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<FileListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Download a given monthly call report using MTOM
     * @param    fileName    Required parameter: The name of the report to download
	 * @return	Returns the InputStream response from the API call*/
    public void getCdrsFileAsync(
            final String fileName,
            final APICallBack<InputStream> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/cdrs/cdrsfile/{fileName}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4743990601517324217L;
            {
                    put( "fileName", fileName );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsBinaryAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            InputStream result = response.getRawBody();
                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Request the generation of a call report for a full month
     * @param    year    Required parameter: The year in YYYY format
     * @param    month    Required parameter: The month in MM format
	 * @return	Returns the StatusModel response from the API call*/
    public void createCdrsFileRequestAsync(
            final String year,
            final String month,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/cdrs/cdrsfile/request/{year}/{month}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5447405599813906537L;
            {
                    put( "year", year );
                    put( "month", month );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.post(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
}