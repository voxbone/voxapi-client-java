/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/10/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.voxbone.sandbox.http.client.HttpClient;
import com.voxbone.sandbox.http.request.HttpRequest;
import com.voxbone.sandbox.http.response.HttpResponse;
import com.voxbone.sandbox.http.response.HttpStringResponse;
import com.voxbone.sandbox.http.client.APICallBack;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class InventoryController extends BaseController {

    //private fields for configuration

   /** The username to use with basic authentication */
    private String basicAuthUserName;

   /** The password to use with basic authentication */
    private String basicAuthPassword;

   /**
    * Constructor with authentication and configuration parameters */
    public InventoryController (String basicAuthUserName, String basicAuthPassword) {
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

   /**
    * Constructor with authentication and configuration parameters */
    public InventoryController (HttpClient _client, String basicAuthUserName, String basicAuthPassword) {
        super(_client);
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

    /**
     * List or search DIDs in your account
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response)
     * @param    pageNumber    Required parameter: The page number, starting at 0
     * @param    webRtcEnabled    Optional parameter: A boolean flag indicating if the numbers are WebRTC enabled
     * @param    smsOutbound    Optional parameter: A boolean flag indicating if the numbers are SMS Outbound enabled
     * @param    deliveryId    Optional parameter: The identifier of the POP the numbers are mapped to
     * @param    portingReference    Optional parameter: The reference for the numbers' porting request
     * @param    orderReference    Optional parameter: The reference for the numbers' order
     * @param    countryCodeA3    Optional parameter: The three letter identifier of the country the numbers are part of
     * @param    serviceType    Optional parameter: The service type of the numbers
     * @param    smsLinkGroupId    Optional parameter: The identifier of the sms link group the numbers are mapped to
     * @param    faxUriId    Optional parameter: The identifier of the fax uri the numbers are mapped to
     * @param    voiceUriId    Optional parameter: The identifier of the voice uri the numbers are mapped to
     * @param    regulationAddressId    Optional parameter: The identifier of the address the numbers are linked to
     * @param    e164Pattern    Optional parameter: The E164, or part of it. The system will attempt to find any DID which E164 contains this string of numbers
     * @param    didGroupIds    Optional parameter: A list of identifiers for the didGroup the DIDs are part of
     * @param    needAddressLink    Optional parameter: A boolean flag indicating if the numbers need to be linked to an address for regulation purposes
     * @param    didIds    Optional parameter: A list of DID identifiers
	 * @return	Returns the DidListModel response from the API call*/
    public void getDidsAsync(
            final int pageSize,
            final int pageNumber,
            final Boolean webRtcEnabled,
            final Boolean smsOutbound,
            final Integer deliveryId,
            final String portingReference,
            final String orderReference,
            final String countryCodeA3,
            final String serviceType,
            final Integer smsLinkGroupId,
            final Integer faxUriId,
            final Integer voiceUriId,
            final Integer regulationAddressId,
            final String e164Pattern,
            final List<Integer> didGroupIds,
            final Boolean needAddressLink,
            final List<Integer> didIds,
            final APICallBack<DidListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/did");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4825193362109452431L;
            {
                    put( "pageSize", pageSize );
                    put( "pageNumber", pageNumber );
                    put( "webRtcEnabled", webRtcEnabled );
                    put( "smsOutbound", smsOutbound );
                    put( "deliveryId", deliveryId );
                    put( "portingReference", portingReference );
                    put( "orderReference", orderReference );
                    put( "countryCodeA3", countryCodeA3 );
                    put( "serviceType", serviceType );
                    put( "smsLinkGroupId", smsLinkGroupId );
                    put( "faxUriId", faxUriId );
                    put( "voiceUriId", voiceUriId );
                    put( "regulationAddressId", regulationAddressId );
                    put( "e164Pattern", e164Pattern );
                    put( "didGroupIds", didGroupIds );
                    put( "needAddressLink", needAddressLink );
                    put( "didIds", didIds );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            DidListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<DidListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List the available credit packages for purchase
	 * @return	Returns the CreditPackageListModel response from the API call*/
    public void getCreditPackagesAsync(
            final APICallBack<CreditPackageListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/creditpackage");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CreditPackageListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CreditPackageListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List available didgroups for number ordering
     * @param    countryCodeA3    Required parameter: The three letter identifier of the didgroup country
     * @param    pageNumber    Required parameter: The page number, starting at 0.
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    didGroupIds    Optional parameter: The identifiers for the didgroups to list
     * @param    stateId    Optional parameter: The identifier for the didgroup state
     * @param    cityNamePattern    Optional parameter: A pattern that will be matched against the didgroup city
     * @param    rateCenter    Optional parameter: The rate center name of the didgroup
     * @param    areaCode    Optional parameter: The area code of the DID group (e.g. “646”).
     * @param    didType    Optional parameter: The type of number
     * @param    featureIds    Optional parameter: The features supported by the didgroup
	 * @return	Returns the DidGroupListModel response from the API call*/
    public void getDidgroupsAsync(
            final String countryCodeA3,
            final int pageNumber,
            final int pageSize,
            final List<Integer> didGroupIds,
            final Integer stateId,
            final String cityNamePattern,
            final String rateCenter,
            final String areaCode,
            final String didType,
            final List<Integer> featureIds,
            final APICallBack<DidGroupListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/didgroup");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5139511281291450942L;
            {
                    put( "countryCodeA3", countryCodeA3 );
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "didGroupIds", didGroupIds );
                    put( "stateId", stateId );
                    put( "cityNamePattern", cityNamePattern );
                    put( "rateCenter", rateCenter );
                    put( "areaCode", areaCode );
                    put( "didType", didType );
                    put( "featureIds", featureIds );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            DidGroupListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<DidGroupListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List the restrictions that apply to a specific country
     * @param    countryCodeA3    Required parameter: The three letter identifier for the country
	 * @return	Returns the RestrictionListModel response from the API call*/
    public void getRestrictionsAsync(
            final String countryCodeA3,
            final APICallBack<RestrictionListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/country/{countryCodeA3}/restriction");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5333526231671331825L;
            {
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            RestrictionListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<RestrictionListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List the states in a specific country
     * @param    countryCodeA3    Required parameter: The three letter identifier for the country
	 * @return	Returns the StateListModel response from the API call*/
    public void getStatesAsync(
            final String countryCodeA3,
            final APICallBack<StateListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/country/{countryCodeA3}/state");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4852395212046335173L;
            {
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StateListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StateListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List the trunks available in your account
	 * @return	Returns the TrunkListModel response from the API call*/
    public void getTrunksAsync(
            final APICallBack<TrunkListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/trunk");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            TrunkListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<TrunkListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List the zones available in your account
	 * @return	Returns the ZoneListModel response from the API call*/
    public void getZonesAsync(
            final APICallBack<ZoneListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/zone");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            ZoneListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<ZoneListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List the available features for didgroups
	 * @return	Returns the FeatureListModel response from the API call*/
    public void getFeaturesAsync(
            final APICallBack<FeatureListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/feature");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            FeatureListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<FeatureListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Show information on a specific country
     * @param    countryCodeA3    Required parameter: The three letter identifier for the country
	 * @return	Returns the CountryListModel response from the API call*/
    public void getCountryAsync(
            final String countryCodeA3,
            final APICallBack<CountryListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/country/{countryCodeA3}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5624118986649599247L;
            {
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CountryListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CountryListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List countries available in the Voxbone coverage
     * @param    pageNumber    Required parameter: The page number, starting at 0
     * @param    pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param    countryCodeA3    Optional parameter: The three letter identifier for the country
	 * @return	Returns the CountryListModel response from the API call*/
    public void getCountriesAsync(
            final int pageNumber,
            final int pageSize,
            final String countryCodeA3,
            final APICallBack<CountryListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/inventory/country");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5562348487152011656L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "countryCodeA3", countryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            CountryListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<CountryListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
}