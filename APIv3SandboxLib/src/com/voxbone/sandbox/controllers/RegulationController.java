/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/10/2015
 */
package com.voxbone.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.voxbone.sandbox.http.client.HttpClient;
import com.voxbone.sandbox.http.request.HttpRequest;
import com.voxbone.sandbox.http.response.HttpResponse;
import com.voxbone.sandbox.http.response.HttpStringResponse;
import com.voxbone.sandbox.http.client.APICallBack;
import com.voxbone.sandbox.*;
import com.voxbone.sandbox.models.*;

public class RegulationController extends BaseController {

    //private fields for configuration

   /** The username to use with basic authentication */
    private String basicAuthUserName;

   /** The password to use with basic authentication */
    private String basicAuthPassword;

   /**
    * Constructor with authentication and configuration parameters */
    public RegulationController (String basicAuthUserName, String basicAuthPassword) {
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

   /**
    * Constructor with authentication and configuration parameters */
    public RegulationController (HttpClient _client, String basicAuthUserName, String basicAuthPassword) {
        super(_client);
        this.basicAuthUserName = basicAuthUserName;
        this.basicAuthPassword = basicAuthPassword;
    }

    /**
     * Create a new address
     * @param    address    Required parameter: The address to create
     * @param    proof    Optional parameter: The proof of address
	 * @return	Returns the AddressIdentifierModel response from the API call*/
    public void addressAsync(
            final AddressModel address,
            final File proof,
            final APICallBack<AddressIdentifierModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> parameters = new HashMap<String, Object>() {
            {
                    put( "address", APIHelper.jsonSerialize(address) );
                    put( "proof", proof );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.put(queryUrl, headers, parameters,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            AddressIdentifierModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<AddressIdentifierModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Delete an address from your account
     * @param    addressId    Required parameter: The identifier of the address
	 * @return	Returns the StatusModel response from the API call*/
    public void deleteAddressAsync(
            final int addressId,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address/{addressId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5398155191055961215L;
            {
                    put( "addressId", addressId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.delete(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Show information on a specific address
     * @param    addressId    Required parameter: The address identifier
	 * @return	Returns the AddressListModel response from the API call*/
    public void getAddressAsync(
            final int addressId,
            final APICallBack<AddressListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address/{addressId}");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5653624300982815068L;
            {
                    put( "addressId", addressId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            AddressListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<AddressListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List or search addresses in your account
     * @param    pageNumber    Required parameter: The page number, starting at 0
     * @param    pageSize    Required parameter: The size of the page
     * @param    companyName    Optional parameter: The name of the company residing at this address
     * @param    firstName    Optional parameter: The first name of the person residing at this address
     * @param    lastName    Optional parameter: The last name of the person residing at this address
     * @param    countryCodeA3    Optional parameter: The three letter identifier for the address country
     * @param    city    Optional parameter: The city name
     * @param    streetName    Optional parameter: The street name
     * @param    buildingNumber    Optional parameter: The building number
     * @param    customerReference    Optional parameter: A human readable description for the address
     * @param    status    Optional parameter: The status of the address
     * @param    linked    Optional parameter: A flag indicating if numbers are linked to this address
     * @param    zipCode    Optional parameter: The zip code
	 * @return	Returns the AddressListModel response from the API call*/
    public void getAddressesAsync(
            final int pageNumber,
            final int pageSize,
            final String companyName,
            final String firstName,
            final String lastName,
            final String countryCodeA3,
            final String city,
            final String streetName,
            final String buildingNumber,
            final String customerReference,
            final String status,
            final Boolean linked,
            final String zipCode,
            final APICallBack<AddressListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5651449479386131649L;
            {
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "companyName", companyName );
                    put( "firstName", firstName );
                    put( "lastName", lastName );
                    put( "countryCodeA3", countryCodeA3 );
                    put( "city", city );
                    put( "streetName", streetName );
                    put( "buildingNumber", buildingNumber );
                    put( "customerReference", customerReference );
                    put( "status", status );
                    put( "linked", linked );
                    put( "zipCode", zipCode );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            AddressListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<AddressListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Link a number to a specified address
     * @param    addressId    Required parameter: The address identifier
     * @param    didIds    Required parameter: The list of number identifiers
	 * @return	Returns the StatusModel response from the API call*/
    public void addressLinkAsync(
            final String addressId,
            final List<Integer> didIds,
            final APICallBack<StatusModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address/{addressId}/link");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5109209794439976740L;
            {
                    put( "addressId", addressId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.postBody(queryUrl, headers, APIHelper.jsonSerialize(didIds),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Unlink numbers from an address
     * @param    didIds    Required parameter: The list of number identifiers
	 * @return	Returns the StatusModel response from the API call*/
    public void addressUnlinkAsync(
            final List<Integer> didIds,
            final APICallBack<StatusModel> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address/unlink");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.postBody(queryUrl, headers, APIHelper.jsonSerialize(didIds),
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * List the zipcodes recognised by Voxbone
     * @param    countryCodeA3    Required parameter: The three letter identifier for the country
     * @param    pageNumber    Required parameter: The page number, starting at 0
     * @param    pageSize    Required parameter: The page size
     * @param    areaCode    Optional parameter: The area code
	 * @return	Returns the ZipCodeListModel response from the API call*/
    public void getZipcodeAsync(
            final String countryCodeA3,
            final int pageNumber,
            final int pageSize,
            final String areaCode,
            final APICallBack<ZipCodeListModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/zipcode");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5674048247415678647L;
            {
                    put( "countryCodeA3", countryCodeA3 );
                    put( "pageNumber", pageNumber );
                    put( "pageSize", pageSize );
                    put( "areaCode", areaCode );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            ZipCodeListModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<ZipCodeListModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Upload a proof for a specific address
     * @param    addressId    Required parameter: The address identifier
     * @param    proof    Required parameter: The proof to upload
	 * @return	Returns the StatusModel response from the API call*/
    public void addressProofAsync(
            final int addressId,
            final File proof,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address/{addressId}/proof");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5419577591685515592L;
            {
                    put( "addressId", addressId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> parameters = new HashMap<String, Object>() {
            {
                    put( "proof", proof );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.put(queryUrl, headers, parameters,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Request the verification of an address
     * @param    addressId    Required parameter: The address identifier
	 * @return	Returns the StatusModel response from the API call*/
    public void addressVerificationAsync(
            final int addressId,
            final APICallBack<StatusModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address/{addressId}/verification");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5461622616323988826L;
            {
                    put( "addressId", addressId );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
                    put( "Content-type", "application/json; charset=utf-8" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.put(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            StatusModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<StatusModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
    /**
     * Check if an address is valid to unblock numbers from a given country and type
     * @param    addressId    Required parameter: The address identifier
     * @param    didType    Required parameter: The number type
     * @param    destinationCountryCodeA3    Required parameter: The three letter identifier for the country
	 * @return	Returns the AddressValidResponseModel response from the API call*/
    public void getAddressValidationAsync(
            final String addressId,
            final String didType,
            final String destinationCountryCodeA3,
            final APICallBack<AddressValidResponseModel> callBack
    ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/regulation/address/{addressId}/validation");

        //process optional query parameters
        APIHelper.appendUrlWithTemplateParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5481058913895679915L;
            {
                    put( "addressId", addressId );
            }});

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5720381808376584997L;
            {
                    put( "didType", didType );
                    put( "destinationCountryCodeA3", destinationCountryCodeA3 );
            }});

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> headers = new HashMap<String, String>() {
            {
                    put( "User-Agent", "APIMATIC 2.0" );
                    put( "Accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest request = clientInstance.get(queryUrl, headers, null,
                                        basicAuthUserName, basicAuthPassword);

        //invoke request and get response
        Runnable responseTask = new Runnable() {
            public void run() throws APIError {
                //make the API call
                clientInstance.executeAsStringAsync(request, new APICallBack<HttpResponse>() {
                    public void onSuccess(Object context, HttpResponse response) {
                        try {
                            //Error handling using HTTP status codes
                            int responseCode = response.getStatusCode();
                            if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                                throw new APIError("HTTP Response Not OK", responseCode, response.getRawBody());

                            //extract result from the http response
                            AddressValidResponseModel result = APIHelper.jsonDeserialize(((HttpStringResponse)response).getBody(),
                                                        new TypeReference<AddressValidResponseModel>(){});

                            //let the callee know of the success
                            callBack.onSuccess(context, result);
                        } catch (APIError error) {
                            //let the callee know of the error
                            callBack.onFailure(context, error);
                        } catch (IOException exception) {
                            //let the callee know of the error
                            callBack.onFailure(context, exception);
                        }
                    }
                    public void onFailure(Object context, Throwable error) {
                        //let the callee know of the failure
                        callBack.onFailure(context, error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(responseTask);
    }
        
}