/*
 * APIv3SandboxLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/10/2015
 */
package com.voxbone.sandbox.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

public class DidConfigurationModel 
        implements java.io.Serializable {

    private List<Integer> didIds;
    private int voiceUriId;
    private int smsLinkGroupId;
    private int faxUriId;
    private int capacityGroupId;
    private int trunkId;
    private int deliveryId;
    private boolean srvLookup;
    private CallerIdModel callerId;
    private String cliPrivacy;
    private PeerModel peer;
    private String ringback;
    private boolean dnisEnabled;
    private boolean blockOrdinary;
    private boolean blockCellular;
    private boolean blockPayphone;
    private boolean smsOutbound;
    private boolean webRtcEnabled;
    /** GETTER
     * The identifiers of the DIDs to update
     */
    @JsonGetter("didIds")
    public List<Integer> getDidIds ( ) { 
        return this.didIds;
    }
    
    /** SETTER
     * The identifiers of the DIDs to update
     */
    @JsonSetter("didIds")
    public void setDidIds (List<Integer> value) { 
        this.didIds = value;
    }
 
    /** GETTER
     * The identifier of a voice uri to apply
     */
    @JsonGetter("voiceUriId")
    public int getVoiceUriId ( ) { 
        return this.voiceUriId;
    }
    
    /** SETTER
     * The identifier of a voice uri to apply
     */
    @JsonSetter("voiceUriId")
    public void setVoiceUriId (int value) { 
        this.voiceUriId = value;
    }
 
    /** GETTER
     * The identifier of an sms link group to apply
     */
    @JsonGetter("smsLinkGroupId")
    public int getSmsLinkGroupId ( ) { 
        return this.smsLinkGroupId;
    }
    
    /** SETTER
     * The identifier of an sms link group to apply
     */
    @JsonSetter("smsLinkGroupId")
    public void setSmsLinkGroupId (int value) { 
        this.smsLinkGroupId = value;
    }
 
    /** GETTER
     * The identifier of a fax uri to apply
     */
    @JsonGetter("faxUriId")
    public int getFaxUriId ( ) { 
        return this.faxUriId;
    }
    
    /** SETTER
     * The identifier of a fax uri to apply
     */
    @JsonSetter("faxUriId")
    public void setFaxUriId (int value) { 
        this.faxUriId = value;
    }
 
    /** GETTER
     * The identifier of a capacity group to map the numbers to
     */
    @JsonGetter("capacityGroupId")
    public int getCapacityGroupId ( ) { 
        return this.capacityGroupId;
    }
    
    /** SETTER
     * The identifier of a capacity group to map the numbers to
     */
    @JsonSetter("capacityGroupId")
    public void setCapacityGroupId (int value) { 
        this.capacityGroupId = value;
    }
 
    /** GETTER
     * The identifier of a trunk to map the numbers to
     */
    @JsonGetter("trunkId")
    public int getTrunkId ( ) { 
        return this.trunkId;
    }
    
    /** SETTER
     * The identifier of a trunk to map the numbers to
     */
    @JsonSetter("trunkId")
    public void setTrunkId (int value) { 
        this.trunkId = value;
    }
 
    /** GETTER
     * The identifier of a delivery to use for the numbers
     */
    @JsonGetter("deliveryId")
    public int getDeliveryId ( ) { 
        return this.deliveryId;
    }
    
    /** SETTER
     * The identifier of a delivery to use for the numbers
     */
    @JsonSetter("deliveryId")
    public void setDeliveryId (int value) { 
        this.deliveryId = value;
    }
 
    /** GETTER
     * A flag indicating if srv lookup should be used
     */
    @JsonGetter("srvLookup")
    public boolean getSrvLookup ( ) { 
        return this.srvLookup;
    }
    
    /** SETTER
     * A flag indicating if srv lookup should be used
     */
    @JsonSetter("srvLookup")
    public void setSrvLookup (boolean value) { 
        this.srvLookup = value;
    }
 
    /** GETTER
     * The caller id configuration to apply
     */
    @JsonGetter("callerId")
    public CallerIdModel getCallerId ( ) { 
        return this.callerId;
    }
    
    /** SETTER
     * The caller id configuration to apply
     */
    @JsonSetter("callerId")
    public void setCallerId (CallerIdModel value) { 
        this.callerId = value;
    }
 
    /** GETTER
     * The cli privacy configuration to apply
     */
    @JsonGetter("cliPrivacy")
    public String getCliPrivacy ( ) { 
        return this.cliPrivacy;
    }
    
    /** SETTER
     * The cli privacy configuration to apply
     */
    @JsonSetter("cliPrivacy")
    public void setCliPrivacy (String value) { 
        this.cliPrivacy = value;
    }
 
    /** GETTER
     * The peer configuration to apply
     */
    @JsonGetter("peer")
    public PeerModel getPeer ( ) { 
        return this.peer;
    }
    
    /** SETTER
     * The peer configuration to apply
     */
    @JsonSetter("peer")
    public void setPeer (PeerModel value) { 
        this.peer = value;
    }
 
    /** GETTER
     * The ringback configuration to apply
     */
    @JsonGetter("ringback")
    public String getRingback ( ) { 
        return this.ringback;
    }
    
    /** SETTER
     * The ringback configuration to apply
     */
    @JsonSetter("ringback")
    public void setRingback (String value) { 
        this.ringback = value;
    }
 
    /** GETTER
     * A flag indicating if DNIS should be enabled
     */
    @JsonGetter("dnisEnabled")
    public boolean getDnisEnabled ( ) { 
        return this.dnisEnabled;
    }
    
    /** SETTER
     * A flag indicating if DNIS should be enabled
     */
    @JsonSetter("dnisEnabled")
    public void setDnisEnabled (boolean value) { 
        this.dnisEnabled = value;
    }
 
    /** GETTER
     * A flag indicating if ordinary calls should be blocked
     */
    @JsonGetter("blockOrdinary")
    public boolean getBlockOrdinary ( ) { 
        return this.blockOrdinary;
    }
    
    /** SETTER
     * A flag indicating if ordinary calls should be blocked
     */
    @JsonSetter("blockOrdinary")
    public void setBlockOrdinary (boolean value) { 
        this.blockOrdinary = value;
    }
 
    /** GETTER
     * A flag indicating if cellular calls should be blocked
     */
    @JsonGetter("blockCellular")
    public boolean getBlockCellular ( ) { 
        return this.blockCellular;
    }
    
    /** SETTER
     * A flag indicating if cellular calls should be blocked
     */
    @JsonSetter("blockCellular")
    public void setBlockCellular (boolean value) { 
        this.blockCellular = value;
    }
 
    /** GETTER
     * A flag indicating if payphone calls should be blocked
     */
    @JsonGetter("blockPayphone")
    public boolean getBlockPayphone ( ) { 
        return this.blockPayphone;
    }
    
    /** SETTER
     * A flag indicating if payphone calls should be blocked
     */
    @JsonSetter("blockPayphone")
    public void setBlockPayphone (boolean value) { 
        this.blockPayphone = value;
    }
 
    /** GETTER
     * A flag indicating if sms outbound should be activated
     */
    @JsonGetter("smsOutbound")
    public boolean getSmsOutbound ( ) { 
        return this.smsOutbound;
    }
    
    /** SETTER
     * A flag indicating if sms outbound should be activated
     */
    @JsonSetter("smsOutbound")
    public void setSmsOutbound (boolean value) { 
        this.smsOutbound = value;
    }
 
    /** GETTER
     * A flag indicating if webrtc should be activated
     */
    @JsonGetter("webRtcEnabled")
    public boolean getWebRtcEnabled ( ) { 
        return this.webRtcEnabled;
    }
    
    /** SETTER
     * A flag indicating if webrtc should be activated
     */
    @JsonSetter("webRtcEnabled")
    public void setWebRtcEnabled (boolean value) { 
        this.webRtcEnabled = value;
    }
 
}
 